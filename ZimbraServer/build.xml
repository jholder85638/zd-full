<project name="ZimbraServer" default="jar">

    <property file='build-custom.properties'/>
    <property environment="env"/>

    <!-- The OS user running ZCS.  Use ZIMBRA_USER environment variable
          if set.  If not, default to "zimbra". -->
    <condition property="zimbra.user" value="${env.ZIMBRA_USER}">
        <isset property="env.ZIMBRA_USER"/>
    </condition>
    <condition property="zimbra.user" value="zimbra">
        <not>
            <isset property="zimbra.user"/>
        </not>
    </condition>

    <!-- This machine's hostname.  Use ZIMBRA_HOSTNAME environment variable
          if set.  If not, use "hostname" command output. -->
    <exec executable="hostname" outputproperty="exec.hostname"/>
    <condition property="zimbra.server.hostname" value="${env.ZIMBRA_HOSTNAME}">
        <isset property="env.ZIMBRA_HOSTNAME"/>
    </condition>
    <condition property="zimbra.server.hostname" value="${exec.hostname}">
        <not>
            <isset property="zimbra.server.hostname"/>
        </not>
    </condition>

    <!-- SMTP server for outgoing email.  Use ZIMBRA_SMTP_HOST environment
          variable if set.  Otherwise default to "localhost". -->
    <condition property="zimbra.smtp.host" value="${env.ZIMBRA_SMTP_HOST}">
        <isset property="env.ZIMBRA_SMTP_HOST"/>
    </condition>
    <condition property="zimbra.smtp.host" value="localhost">
        <not>
            <isset property="zimbra.smtp.host"/>
        </not>
    </condition>

    <!-- Default email view, group by conversation or by message -->
    <condition property="zimbra.prefGroupMailBy" value="${env.ZIMBRA_GROUP_MAIL_BY}">
        <isset property="env.ZIMBRA_GROUP_MAIL_BY"/>
    </condition>
    <condition property="zimbra.prefGroupMailBy" value="conversation">
        <not>
            <isset property="zimbra.prefGroupMailBy"/>
        </not>
    </condition>

    <!-- Optional Kerberos authentication realm -->
    <condition property="zimbra.kerberos.realm" value="${env.ZIMBRA_KERBEROS_REALM}">
        <isset property="env.ZIMBRA_KERBEROS_REALM"/>
    </condition>
    <property name="zimbra.kerberos.realm" value="ZIMBRA.COM"/>

    <condition property="production.suffix" value=".production" else="">
        <isset property="is-production"/>
    </condition>

    <property name="build.dir" location="build"/>
    <property name="build.classes.dir" location="${build.dir}/classes"/>
    <property name="build.zmprov" location="${build.dir}/data/zmprov.txt"/>
    <property name="dist.dir" location="build/dist"/>
    <property name="dist.db.dir" location="build/dist/db"/>
    <property name="dist.jetty.dir" location="${dist.dir}/jetty"/>
    <property name="generated.java.dir" location="${build.dir}/generated/src/java"/>
    <property name="warfilename" value="service.war"/>
    <property name="warfile" location="${build.dir}/${warfilename}"/>
    <property name="jarfile" location="${build.dir}/zimbrastore.jar"/>
    <property name="common.dir" location="../ZimbraCommon"/>
    <property name="common.classes.dir" location="${common.dir}/build/classes"/>
    <property name="common.jarfile" location="${common.dir}/build/zimbracommon.jar"/>
    <property name="common.jars.dir" location="${common.dir}/jars"/>

    <property name="soap.dir" location="../ZimbraSoap"/>
    <property name="soap.classes.dir" location="${soap.dir}/build/classes"/>
    <property name="soap.jarfile" location="${soap.dir}/build/zimbrasoap.jar"/>

    <property name="im.dir" location="../ZimbraIM"/>
    <property name="im.classes.dir" location="${im.dir}/build/classes"/>
    <property name="im.jarfile" location="${im.dir}/build/zimbraim.jar"/>
    <property name="im.jars.dir" location="${im.dir}/jars"/>

    <property name="jars.dir" location="jars"/>
    <property name="lib.dir" location="lib"/>
    <property name="tools.lib.dir" location="tools/lib"/>
    <property name="src.dir" location="src"/>
    <property name="src.java.dir" location="${src.dir}/java"/>
    <property name="test.dir" location="${build.dir}/test"/>
    <property name="test.src.dir" location="${src.dir}/java-test"/>
    <property name="test.classes.dir" location="${build.dir}/test-classes"/>
    <property name="config.dir" location="conf"/>
    <property name="war.web.xml" location="${config.dir}/web.xml${production.suffix}"/>
    <property name="jetty.xml.file" location='${config.dir}/jetty-6.1/jetty.xml'/>

    <property name="spnego.dir" location="${config.dir}/jetty-6.1/spnego"/>

    <property name="deploy.war" value="${warfile}"/>
    <property name="deploy.host" value="127.0.0.1"/>
    <property name="deploy.port" value="7070"/>
    <property name="ldap.host" value="127.0.0.1"/>
    <property name="ldap.port" value="389"/>
    <property name="ldap.service.windows" value="CDSSilverSlapd"/>

    <condition property="remote.deploy.host" value="${env.ZIMBRA_REMOTE_DEPLOY_HOST}">
        <isset property="env.ZIMBRA_REMOTE_DEPLOY_HOST"/>
    </condition>
    <condition property="remote.deploy.port" value="${env.ZIMBRA_REMOTE_DEPLOY_PORT}">
        <isset property="env.ZIMBRA_REMOTE_DEPLOY_PORT"/>
    </condition>

    <property name="lmtp.host" value="127.0.0.1"/>
    <property name="lmtp.port" value="7025"/>
    <property name="lmtpinject.numthreads" value="2"/>

    <property name="zimbra.home.dir" location="/opt/zimbra"/>

    <property name="zimbra.derby.dir" location="${zimbra.home.dir}/derby"/>
    <property name="zimbra.index.dir" location="${zimbra.home.dir}/index"/>
    <property name="zimbra.store.dir" location="${zimbra.home.dir}/store"/>
    <property name="zimbra.sqlite.dir" location="${zimbra.home.dir}/sqlite"/>

    <property name="jetty.home.dir" location="${zimbra.home.dir}/jetty"/>
    <property name="jetty.conf.dir" value="${jetty.home.dir}/etc"/>
    <property name="jetty.src.dir" location="../ThirdParty/jetty"/>
    <property name="jetty.version" value="6.1.22.z6"/>
    <available property="jetty.start.jar.exists" file="${jetty.home.dir}/start.jar"/>

    <property name="ical4j.jar" value="ical4j-0.9.16-patched.jar"/>
    <property name="ziputil.jar" value="ant-1.7.0-ziputil-patched.jar"/>
    <property name="memcached.jar" value="memcached-2.5.jar"/>

    <condition property="db-sqlite">
        <isset property="env.ZIMBRA_USE_SQLITE"/>
    </condition>
    <condition property="db-derby">
        <and>
            <isset property="env.ZIMBRA_USE_DERBY"/>
            <not>
                <isset property="db-sqlite"/>
            </not>
        </and>
    </condition>
    <condition property="db-mysql">
        <and>
            <not>
                <isset property="db-sqlite"/>
            </not>
            <not>
                <isset property="db-derby"/>
            </not>
        </and>
    </condition>

    <condition property="db.driver.jar" value="derby*.jar">
        <isset property="db-derby"/>
    </condition>
    <condition property="db.driver.jar" value="mysql-connector-java*.jar">
        <isset property="db-mysql"/>
    </condition>
    <condition property="db.driver.jar" value="sqlitejdbc*.jar">
        <isset property="db-sqlite"/>
    </condition>

    <condition property="is-windows">
        <os family="windows"/>
    </condition>
    <condition property="is-unix">
        <not>
            <os family="windows"/>
        </not>
    </condition>

    <condition property="jetty-use-service">
        <isset property="env.ZIMBRA_JETTY_USE_SERVICE"/>
    </condition>

    <condition property="deploy.dir" value="${env.DEPLOY_DIR}">
        <isset property="env.DEPLOY_DIR"/>
    </condition>

    <condition property="deploy.dir" value="${jetty.home.dir}/webapps">
        <not>
            <isset property="env.DEPLOY_DIR"/>
        </not>
    </condition>

    <property name="deploy.path" value="/service"/>

    <condition property="native.os" value="MacOSX">
        <os name="Mac OS X"/>
    </condition>
    <condition property="native.os" value="Linux">
        <os name="Linux"/>
    </condition>
    <condition property="native.so" value="jnilib">
        <os name="Mac OS X"/>
    </condition>
    <condition property="native.so" value="so">
        <not>
            <os name="Mac OS X"/>
        </not>
    </condition>
    <condition property="native.arch" value="">
        <os name="Mac OS X"/>
    </condition>
    <condition property="native.arch" value=".${os.arch}">
        <not>
            <os name="Mac OS X"/>
        </not>
    </condition>

    <property name="slapd.config.dir" value="${config.dir}/ldap/config"/>
    <condition property="slapd.config.src" value="${slapd.config.dir}/cn=config.ldif">
        <isset property="is-production"/>
    </condition>
    <condition property="slapd.config.src" value="${slapd.config.dir}/cn=config.ldif.dev">
        <not>
            <isset property="is-production"/>
        </not>
    </condition>

    <condition property="slapd.conf.src" value="${config.dir}/ldap/slapd.win.conf">
        <isset property="is-windows"/>
    </condition>
    <condition property="slapd.conf.src" value="${config.dir}/ldap/slapd.conf${production.suffix}">
        <isset property="is-unix"/>
    </condition>
    <condition property="slapd.conf.dir" value="openldap">
        <isset property="is-windows"/>
    </condition>
    <condition property="slapd.conf.dir" value="conf">
        <isset property="is-unix"/>
    </condition>
    <condition property="slapd.etc.dir" value="openldap/etc">
        <isset property="is-windows"/>
    </condition>
    <condition property="slapd.etc.dir" value="openldap/etc/openldap">
        <isset property="is-unix"/>
    </condition>

    <condition property="ldapmodify" value="${zimbra.home.dir}/openldap/ldapmodify">
        <isset property="is-windows"/>
    </condition>
    <condition property="ldapmodify" value="${zimbra.home.dir}/openldap/bin/ldapmodify">
        <isset property="is-unix"/>
    </condition>

    <condition property="ldapdelete" value="${zimbra.home.dir}/openldap/ldapdelete">
        <isset property="is-windows"/>
    </condition>
    <condition property="ldapdelete" value="${zimbra.home.dir}/openldap/bin/ldapdelete">
        <isset property="is-unix"/>
    </condition>

    <property name="defaultdomain.name" value="${zimbra.server.hostname}"/>
    <property name="samplefamilyaccounts.file" location="data/soap/samplefamilyaccounts.xml"/>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${common.jars.dir}/ant-contrib-1.0b1.jar"/>
        </classpath>
    </taskdef>

    <path id="class.path">
        <pathelement location="${common.classes.dir}"/>
        <pathelement location="${soap.classes.dir}"/>
        <pathelement location="${im.classes.dir}"/>
        <pathelement location="${build.classes.dir}"/>
        <fileset dir="${jars.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${common.jars.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${im.jars.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${tools.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="class.path"/>

    <path id="all.java.path">
        <pathelement location="${src.java.dir}"/>
        <pathelement location="${generated.java.dir}"/>
    </path>

    <fileset dir="${src.java.dir}" id="src.java.files">
        <include name="**/*.java"/>
    </fileset>

    <fileset dir="${generated.java.dir}" id="generated.java.files">
        <include name="**/*.java"/>
    </fileset>

    <target name="make-dirs">
        <!-- take advantage of the fact that mkdir uses File.mkdirs() and creates inbetween dirs -->
        <echo>Creating dirs under ${base.dir}</echo>

        <mkdir dir="${base.dir}/${slapd.conf.dir}"/>
        <mkdir dir="${base.dir}/${slapd.etc.dir}/schema"/>
        <mkdir dir="${base.dir}/bin"/>
        <mkdir dir="${base.dir}/conf/msgs"/>
        <mkdir dir="${base.dir}/db"/>
        <mkdir dir="${base.dir}/lib/ext"/>
        <mkdir dir="${base.dir}/lib/jars"/>
        <mkdir dir="${base.dir}/libexec"/>
    </target>

    <target name="build-init" description="Creates directories required for compiling">
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${generated.java.dir}"/>
        <mkdir dir="${build.dir}/data"/>
        <antcall target="make-dirs">
            <param name="base.dir" value="${dist.dir}"/>
        </antcall>
    </target>

    <target name="javadoc" depends="set-buildinfo-vars">
        <javadoc sourcepath="src/java" destdir="docs/api" classpathref="class.path" access="private"
                 packagenames="com.zimbra.*" additionalparam='-tag perms:m:"Permissions Required:"'
                 breakiterator="yes" windowtitle="ZimbraServer v${zimbra.buildinfo.version}">
            <link href="http://java.sun.com/j2se/1.6.0/docs/api/"/>
            <link href="http://java.sun.com/products/javamail/javadocs/"/>
            <link href="http://jakarta.apache.org/commons/logging/api/"/>
            <link href="http://ical4j.sourceforge.net/api/"/>
        </javadoc>
    </target>

    <target name="javacc">
        <jjtree javacchome="${jars.dir}" target="${src.java.dir}/com/zimbra/cs/index/query/parser/Parser.jjt"
                outputdirectory="${src.java.dir}/com/zimbra/cs/index/query/parser/"/>
        <javacc javacchome="${jars.dir}" target="${src.java.dir}/com/zimbra/cs/index/query/parser/Parser.jj"
                outputdirectory="${src.java.dir}/com/zimbra/cs/index/query/parser/"/>
    </target>

    <target name="set-buildinfo-vars">
        <tstamp/>
        <condition property="zimbra.buildinfo.platform" value="${native.os}">
            <not>
                <isset property="${zimbra.buildinfo.platform}"/>
            </not>
        </condition>
        <condition property="zimbra.buildinfo.version" value="7.0.0_BETA1_1111">
            <not>
                <isset property="${zimbra.buildinfo.version}"/>
            </not>
        </condition>

        <propertyregex property="zimbra.buildinfo.majorversion"
                       input="${zimbra.buildinfo.version}"
                       regexp="([0-9]+)\.([0-9]+)\.([0-9]+)"
                       select="\1"
                       casesensitive="false"/>

        <propertyregex property="zimbra.buildinfo.minorversion"
                       input="${zimbra.buildinfo.version}"
                       regexp="([0-9]+)\.([0-9]+)\.([0-9]+)"
                       select="\2"
                       casesensitive="false"/>

        <propertyregex property="zimbra.buildinfo.microversion"
                       input="${zimbra.buildinfo.version}"
                       regexp="([0-9]+)\.([0-9]+)\.([0-9]+)"
                       select="\3"
                       casesensitive="false"/>

        <propertyregex property="zimbra.buildinfo.relclass"
                       input="${zimbra.buildinfo.version}"
                       regexp="([0-9]+)\.([0-9]+)\.([0-9]+)_([A-Z]+)"
                       select="\4"
                       casesensitive="false"/>
        <propertyregex property="zimbra.buildinfo.relnum"
                       input="${zimbra.buildinfo.version}"
                       regexp="([0-9]+)\.([0-9]+)\.([0-9]+)_([A-Z]+)([0-9]+)(\.|_)?"
                       select="\5"
                       casesensitive="false"/>

        <propertyregex property="zimbra.buildinfo.buildnum"
                       input="${zimbra.buildinfo.version}"
                       regexp="([0-9]+)\.([0-9]+)\.([0-9]+)_([A-Z0-9]+)(\.|_)?([0-9]+)?"
                       select="\6"
                       casesensitive="false"/>

        <condition property="zimbra.buildinfo.relnum" value="0">
            <not>
                <isset property="${zimbra.buildinfo.relnum}"/>
            </not>
        </condition>

        <condition property="zimbra.buildinfo.type" value="">
            <not>
                <isset property="${zimbra.buildinfo.type}"/>
            </not>
        </condition>
        <condition property="zimbra.buildinfo.release" value="${user.name}">
            <not>
                <isset property="${zimbra.buildinfo.release}"/>
            </not>
        </condition>
        <condition property="zimbra.buildinfo.date" value="${DSTAMP}-${TSTAMP}">
            <not>
                <isset property="${zimbra.buildinfo.date}"/>
            </not>
        </condition>
        <condition property="zimbra.buildinfo.host" value="${zimbra.server.hostname}">
            <not>
                <isset property="${zimbra.buildinfo.host}"/>
            </not>
        </condition>
        <property name="zimbra.buildinfo.all"
                  value="Version: ${zimbra.buildinfo.version}; Type: ${zimbra.buildinfo.type}; Release: ${zimbra.buildinfo.release}; Built: ${zimbra.buildinfo.date}; Host: ${zimbra.buildinfo.host}"/>
        <echo>Version: ${zimbra.buildinfo.version} Date: ${zimbra.buildinfo.date}</echo>
    </target>

    <target name="generate-buildinfo" depends="set-buildinfo-vars,build-init">
        <if>
            <not>
                <available file="${build.dir}/buildinfo/com/zimbra/cs/util/BuildInfoGenerated.java"/>
            </not>
            <then>
                <mkdir dir="${build.dir}/buildinfo/com/zimbra/cs/util"/>
                <echo file="${build.dir}/buildinfo/com/zimbra/cs/util/BuildInfoGenerated.java">
                    package com.zimbra.cs.util;

                    class BuildInfoGenerated {
                    public static final String MAJORVERSION = "${zimbra.buildinfo.majorversion}";
                    public static final String MINORVERSION = "${zimbra.buildinfo.minorversion}";
                    public static final String MICROVERSION = "${zimbra.buildinfo.microversion}";
                    public static final String RELCLASS = "${zimbra.buildinfo.relclass}";
                    public static final String RELNUM = "${zimbra.buildinfo.relnum}";
                    public static final String BUILDNUM = "${zimbra.buildinfo.buildnum}";
                    public static final String VERSION = "${zimbra.buildinfo.version}";
                    public static final String TYPE = "${zimbra.buildinfo.type}";
                    public static final String RELEASE = "${zimbra.buildinfo.release}";
                    public static final String DATE = "${DSTAMP}-${TSTAMP}";
                    public static final String HOST = "${zimbra.buildinfo.host}";
                    }
                </echo>
            </then>
        </if>
        <!--        <javac destdir="${build.classes.dir}" debug="true" target="${javac.target}" srcdir="${build.dir}/buildinfo">-->

        <javac destdir="${build.classes.dir}" debug="true" srcdir="${build.dir}/buildinfo">
        </javac>
    </target>

    <target name="generate-ldap-config" depends="set-buildinfo-vars">
        <trycatch>
            <try>
                <dependset>
                    <srcfileset dir="${config.dir}/attrs" includes="*.xml"/>
                    <targetfileset dir='${build.dir}/ldap-config' includes='*'/>
                </dependset>

                <if>
                    <not>
                        <available file="${build.dir}/ldap-config/zimbra.schema"/>
                    </not>
                    <then>
                        <mkdir dir="${build.dir}/attrs"/>
                        <copy todir="${build.dir}/attrs" overwrite="true" preservelastmodified="true">
                            <fileset dir="${config.dir}/attrs" includes="*.xml"/>
                        </copy>
                        <mkdir dir="${build.dir}/ldap-config"/>
                        <mkdir dir="${build.dir}/ldap-config/config"/>

                        <!-- Zimbra schema for pre OpenLDAP 2.4 - uses zimbra.schema-template, should eventually retire zimbra.schema-template and only use zimbra-ocs.xml -->
                        <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true"
                              classpathref="class.path"
                              failonerror="true">
                            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
                            <arg line="-a generateLdapSchema -i '${build.dir}/attrs' -t ${config.dir}/ldap/zimbra.schema-template -o '${build.dir}' /ldap-config/zimbra.schema"/>
                        </java>

                        <!-- Zimbra schema for OpenLDAP 2.4 - use zimbra-ocs.xml -->
                        <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true"
                              classpathref="class.path"
                              failonerror="true">
                            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
                            <arg line="-a generateSchemaLdif -i '${build.dir}/attrs' -o '${build.dir}' /ldap-config/config/zimbra.ldif"/>
                        </java>

                        <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true"
                              classpathref="class.path"
                              failonerror="true">
                            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
                            <arg line="-a generateGlobalConfigLdif -i '${build.dir}/attrs' -o '${build.dir}' /ldap-config/zimbra_globalconfig.ldif"/>
                        </java>
                        <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true"
                              classpathref="class.path"
                              failonerror="true">
                            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
                            <arg line="-a generateDefaultCOSLdif -i '${build.dir}/attrs' -o '${build.dir}' /ldap-config/zimbra_defaultcos.ldif"/>
                        </java>
                        <copy todir="${build.dir}/ldap-config" file="${config.dir}/ldap/zimbra.ldif"/>
                        <copy todir="${build.dir}/ldap-config" file="${config.dir}/ldap/zimbra_mimehandlers.ldif"/>
                        <copy todir="${build.dir}/ldap-config" file="${config.dir}/ldap/amavisd.schema"/>
                        <copy todir="${build.dir}/ldap-config/config" file="${config.dir}/ldap/amavisd.ldif"/>
                        <copy todir="${build.dir}/ldap-config/config" file="${slapd.config.src}"/>
                        <copy todir="${build.dir}/ldap-config/config"
                              file="${slapd.config.dir}/cn=config/cn=module{0}.ldif"/>
                        <copy todir="${build.dir}/ldap-config/config"
                              file="${slapd.config.dir}/cn=config/cn=schema.ldif"/>
                        <copy todir="${build.dir}/ldap-config/config"
                              file="${slapd.config.dir}/cn=config/olcDatabase={0}config.ldif"/>
                        <copy todir="${build.dir}/ldap-config/config"
                              file="${slapd.config.dir}/cn=config/olcDatabase={-1}frontend.ldif"/>
                        <copy todir="${build.dir}/ldap-config/config"
                              file="${slapd.config.dir}/cn=config/olcDatabase={1}monitor.ldif"/>
                        <copy todir="${build.dir}/ldap-config/config"
                              file="${slapd.config.dir}/cn=config/olcDatabase={2}hdb.ldif"/>
                    </then>
                </if>
            </try>

            <catch>
                <echo>Problem building LDAP config in ZimbraServer/build.xml:521. Continuing.</echo>
            </catch>
        </trycatch>


    </target>

    <target name="generate-getters" depends="set-buildinfo-vars,compile">
        <antcall target="generate-getter">
            <param name="getter.class" value="account"/>
            <param name="getter.output" value="ZAttrAccount.java"/>
        </antcall>
        <antcall target="generate-getter">
            <param name="getter.class" value="calendarResource"/>
            <param name="getter.output" value="ZAttrCalendarResource.java"/>
        </antcall>
        <antcall target="generate-getter">
            <param name="getter.class" value="cos"/>
            <param name="getter.output" value="ZAttrCos.java"/>
        </antcall>
        <antcall target="generate-getter">
            <param name="getter.class" value="domain"/>
            <param name="getter.output" value="ZAttrDomain.java"/>
        </antcall>
        <antcall target="generate-getter">
            <param name="getter.class" value="server"/>
            <param name="getter.output" value="ZAttrServer.java"/>
        </antcall>
        <antcall target="generate-getter">
            <param name="getter.class" value="globalConfig"/>
            <param name="getter.output" value="ZAttrConfig.java"/>
        </antcall>
        <antcall target="generate-getter">
            <param name="getter.class" value="distributionList"/>
            <param name="getter.output" value="ZAttrDistributionList.java"/>
        </antcall>
        <antcall target="generate-provisioning"/>
    </target>

    <target name="generate-getter">
        <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
            <arg line="-a generateGetters -c ${getter.class} -i '${config.dir}/attrs' -r ${src.java.dir}/com/zimbra/cs/account/${getter.output}"/>
        </java>
    </target>

    <target name="generate-provisioning">
        <java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
            <arg line="-a generateProvisioning -i '${config.dir}/attrs' -r ${src.java.dir}/com/zimbra/cs/account/ZAttrProvisioning.java"/>
        </java>
    </target>

    <target name="derby-versions-init" if="db-derby">
        <java classname="com.zimbra.cs.db.Derby" fork="true" classpathref="class.path" failonerror="true">
            <arg line="-o '${build.dir}' "/>
        </java>
    </target>

    <target name="mysql-versions-init" if="db-mysql">
        <java classname="com.zimbra.cs.db.MySQL" fork="true" classpathref="class.path" failonerror="true">
            <arg line="-o '${build.dir}' "/>
        </java>
    </target>

    <target name="sqlite-versions-init" if="db-sqlite">
        <java classname="com.zimbra.cs.db.SQLite" fork="true" classpathref="class.path" failonerror="true">
            <arg line="-o '${build.dir}' "/>
        </java>
    </target>

    <target name="db-versions-init" depends="mysql-versions-init,sqlite-versions-init,derby-versions-init"/>

    <target name="compile" depends="build-init">
        <ant dir="${common.dir}" target="jar" inheritAll="false"/>
        <ant dir="${soap.dir}" target="jar" inheritAll="false"/>
        <ant dir="${im.dir}" target="jar" inheritAll="false"/>
        <javac fork="true" memorymaximumsize="512m" destdir="${build.classes.dir}" debug="true"
               classpathref="class.path">
            <!--        <javac fork="true" memorymaximumsize="512m" destdir="${build.classes.dir}" debug="true"-->
            <!--               classpathref="class.path" target="${javac.target}">-->
            <src refid="all.java.path"/>
        </javac>
        <antcall target="db-versions-init"/>
    </target>

    <target name="jar" depends="generate-buildinfo,compile">
        <echo>Hostname: ${zimbra.server.hostname}</echo>
        <jar destfile="${jarfile}" basedir="${build.classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="com.zimbra.cs.util.BuildInfo"/>
                <attribute name="Implementation-Vendor" value="VMware, Inc."/>
                <attribute name="Implementation-Title" value="Zimbra Server"/>
                <attribute name="Implementation-Version"
                           value="${zimbra.buildinfo.version} ${zimbra.buildinfo.release} ${DSTAMP}-${TSTAMP} ${zimbra.buildinfo.type}"/>
                <attribute name="Specification-Vendor" value="VMware, Inc."/>
                <attribute name="Specification-Title" value="Zimbra Collaboration Suite"/>
                <attribute name="Specification-version"
                           value="${zimbra.buildinfo.majorversion}.${zimbra.buildinfo.minorversion}"/>
            </manifest>
        </jar>
    </target>

    <target name="clean" description="Deletes classes from build directories">
        <ant dir="${common.dir}" target="clean" inheritAll="false"/>
        <ant dir="${soap.dir}" target="clean" inheritAll="false"/>
        <ant dir="${im.dir}" target="clean" inheritAll="false"/>
        <delete dir="${build.dir}"/>
    </target>

    <target name="clean-opt-zimbra" description="Deletes deployed jars, classes, and zimlets">
        <!-- Delete jars, so that we don't leave cruft if a jar is upgraded with a new name. -->
        <delete dir="${zimbra.home.dir}/lib/jars" failonerror="false"/>
        <delete dir="${zimbra.home.dir}/zimlets-deployed" failonerror="false"/>
        <delete dir="${zimbra.home.dir}/zimlets-properties" failonerror="false"/>
        <delete failonerror="false">
            <fileset dir="${jetty.home.dir}/common/lib"
                     includes="${ical4j.jar},${ziputil.jar},${memcached.jar},${db.driver.jar},mysql-connector-java*.jar,mail.jar,zimbra-native.jar,bcprov-jdk15-146.jar,commons-beanutils*.jar,commons-cli*.jar,commons-codec*.jar,commons-collections*.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-logging.jar,commons-pool*.jar,concurrent*.jar,yuicompressor*.jar,dom4j*.jar,ganymed-ssh2*.jar,jakarta-oro*.jar,jaxen*.jar,jcommon*.jar,jfreechart*.jar,junit*.jar,jzlib.jar,mina*.jar,nekohtml.jar,tnef*.jar,xercesImpl*.jar,xpp3.jar,libidn*.jar,jdom*.jar,json.jar,testng*.jar,jython*.jar"/>
        </delete>
    </target>

    <!-- jetty loads jetty-util*.jar, log4j*.jar and slf4j*.jar -->

    <target name="war" depends="jar">
        <war warfile="${warfile}" webxml="${war.web.xml}">
            <fileset dir="WebRoot"/>
            <lib file="${im.jarfile}"/>
            <lib file="${soap.jarfile}"/>
            <lib file="${jarfile}"/>
            <lib dir="${common.jars.dir}">
                <include name="slf4j*.jar"/>
                <include name="*jsieve*.jar"/>
                <include name="lucene*.jar"/>
                <include name="ant-tar*.jar"/>
                <include name="icu4j-*.jar"/>
                <include name="ews.jar"/>
                <include name="ehcache-*.jar"/>
            </lib>
            <lib dir="${im.jars.dir}" includes="*.jar"/>
            <classes dir="${config.dir}" includes="sieveConfig.xml"/>
        </war>
    </target>

    <target name="spnego-service-name">
        <!--
            Setup the service principal name registered with setspn and ktpass
            it has to be a real routable name to reach the jetty server.

            This name is also used to create a zimbra server and provisioning a
            user on the server.
            Note: such server and user is not needed if the test client box can
                  DNS resolve the home server of the user.
                  But in dev env the server name is usually not a resolvble real
                  hostanme, but a simple name like myserver.local, which cannot
                  be resolved from the test client. (Windows 7 VM on jj-esx.spnego.local)
        -->

        <!-- <property name="SERVICE_PRINCIPAL_NAME"     value="jj-server.spnego.local"/> -->
        <!-- <property name="SERVICE_PRINCIPAL_NAME"     value="prome-2s-dhcp141.eng.vmware.com"/> -->
        <exec executable="hostname" outputproperty="hostname-FQDN">
            <arg value="-f"/>
        </exec>
        <property name="SERVICE_PRINCIPAL_NAME" value="${hostname-FQDN}"/>

        <!--
            Again, could've used just ${zimbra.server.hostname} for spnego.server.name if the
            test client box can DNS resolve the home server for the user.
        -->
        <property name="spnego.server.name" value="${SERVICE_PRINCIPAL_NAME}"/>


        <!-- 
            SPNEGO auth realm.  Use SPNEGO_AUTH_REALM environment variable if set.  
            Exit if the environment variable is not set.
        -->
        <condition property="SPNEGO_AUTH_REALM" value="${env.SPNEGO_AUTH_REALM}">
            <isset property="env.SPNEGO_AUTH_REALM"/>
        </condition>
        <fail message="SPNEGO_AUTH_REALM environment variable is not set.">
            <condition>
                <not>
                    <isset property="SPNEGO_AUTH_REALM"/>
                </not>
            </condition>
        </fail>
        <echo>===== Spnego auth realm: ${SPNEGO_AUTH_REALM} =====</echo>

    </target>

    <target name="spnego-inject" depends="spnego-service-name">
        <!--
            Create a server with real hostname so it can be resolved from the test client box.
            Create a user homed on this server.
            (Calling this target is not required if the dev server hostname can be resolved on the test client box)
        -->
        <antcall target="zmprov">
            <param name="args" value="-l cs ${spnego.server.name}
                                            zimbraSmtpHostname ${zimbra.smtp.host}
                                            zimbraSmtpPort 7024
                                            zimbraMailPort 7070
                                            zimbraMailSSLPort 7443
                                            zimbraMailMode http
                                            zimbraImapCleartextLoginEnabled TRUE
                                            zimbraPop3CleartextLoginEnabled TRUE
                                            zimbraServiceInstalled ldap
                                            zimbraServiceInstalled mta
                                            zimbraServiceInstalled mailbox
                                            zimbraServiceEnabled ldap
                                            zimbraServiceEnabled mta
                                            zimbraServiceEnabled mailbox
                                            zimbraMailPurgeSleepInterval 0"/>
        </antcall>

        <antcall target="zmprov">
            <param name="args" value="-l ca spnego@${defaultdomain.name} test123
                                            zimbraMailHost ${spnego.server.name}
                                            cn 'Spnego Demo User'
                                            displayName 'Spnego Demo User'
                                            zimbraForeignPrincipal kerberos5:spnego@${SPNEGO_AUTH_REALM}"/>
        </antcall>

        <!--
            note: after done with spnego testing, remember to set the LC key zimbra_server_hostname
                  back to your default server
        -->
        <antcall target="zmlocalconfig">
            <param name="localconfig-args" value="-e zimbra_server_hostname=${spnego.server.name}"/>
        </antcall>

    </target>

    <!--
        To test spnego:
        - ant reset-all
        - [ant spnego-inject]
        - ant spnego-dev-deploy

        If you run service-deploy after this point, you need to retun spnego-dev-deploy,
        but not spnego-inject.  spnego-inject only needs to be run once after reset-all.

    -->
    <target name="spnego-dev-deploy" depends="spnego-service-name">
        <antcall target="stop-webserver"/>

        <delete file="${jetty.home.dir}/webapps/spnego.war"/>
        <delete dir="${jetty.home.dir}/webapps/spnego"/>
        <mkdir dir='${jetty.home.dir}/webapps/spnego'/>
        <mkdir dir="${jetty.home.dir}/work/spnego"/>

        <!--
            ==========================
             config rewrite variables
            ==========================
        -->

        <!-- global config -->
        <echo>===== hostname for spnego: ${SERVICE_PRINCIPAL_NAME} =====</echo>

        <property name="zimbraSpnegoAuthEnabled" value="TRUE"/>
        <property name="zimbraSpnegoAuthRealm" value="${SPNEGO_AUTH_REALM}"/>

        <!-- server -->
        <property name="zimbraSpnegoAuthPrincipal" value="HTTP/${SERVICE_PRINCIPAL_NAME}@${SPNEGO_AUTH_REALM}"/>
        <property name="zimbraSpnegoAuthTargetName" value="HTTP/${SERVICE_PRINCIPAL_NAME}"/>

        <!-- domain -->
        <property name="zimbraVirtualHostname" value="${spnego.server.name}"/>
        <property name="zimbraWebClientLoginURL" value="../../service/spnego"/>
        <property name="zimbraWebClientLogoutURL" value="../?sso=1"/>
        <property name="zimbraAuthKerberos5Realm" value="${zimbraSpnegoAuthRealm}"/>


        <!-- modify ldap -->
        <antcall target="zmprov">
            <param name="args" value="-l mcf zimbraSpnegoAuthEnabled ${zimbraSpnegoAuthEnabled}"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args" value="-l mcf zimbraSpnegoAuthRealm ${zimbraSpnegoAuthRealm}"/>
        </antcall>

        <antcall target="zmprov">
            <param name="args"
                   value="-l ms ${spnego.server.name} zimbraSpnegoAuthPrincipal ${zimbraSpnegoAuthPrincipal}"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args"
                   value="-l ms ${spnego.server.name} zimbraSpnegoAuthTargetName ${zimbraSpnegoAuthTargetName}"/>
        </antcall>

        <antcall target="zmprov">
            <param name="args" value="-l md ${defaultdomain.name} zimbraPreAuthKey ${zimbraPreAuthKey}"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args" value="-l md ${defaultdomain.name} +zimbraVirtualHostname ${zimbraVirtualHostname}"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args" value="-l md ${defaultdomain.name} zimbraWebClientLoginURL ${zimbraWebClientLoginURL}"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args"
                   value="-l md ${defaultdomain.name} zimbraWebClientLogoutURL ${zimbraWebClientLogoutURL}"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args"
                   value="-l md ${defaultdomain.name} zimbraAuthKerberos5Realm ${zimbraAuthKerberos5Realm}"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args"
                   value="-l md ${defaultdomain.name} +zimbraWebClientLoginURLAllowedUA '.*Windows NT.*Firefox/3.*'"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args"
                   value="-l md ${defaultdomain.name} +zimbraWebClientLoginURLAllowedUA '.*MSIE.*Windows NT.*'"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args"
                   value="-l md ${defaultdomain.name} +zimbraWebClientLoginURLAllowedUA '.*Windows NT.*Chrome.*'"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args"
                   value="-l md ${defaultdomain.name} +zimbraWebClientLogoutURLAllowedUA '.*Windows NT.*Firefox/3.*'"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args"
                   value="-l md ${defaultdomain.name} +zimbraWebClientLogoutURLAllowedUA '.*MSIE.*Windows NT.*'"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args"
                   value="-l md ${defaultdomain.name} +zimbraWebClientLogoutURLAllowedUA '.*Windows NT.*Chrome.*'"/>
        </antcall>

        <!-- copy spnego config files to jetty/etc -->
        <echo/>
        <echo>----- copying files -----</echo>
        <echo/>
        <copy file="${spnego.dir}/etc/krb5.ini" todir="${jetty.conf.dir}" overwrite="true"/>
        <copy file="${spnego.dir}/etc/spnego.conf" todir="${jetty.conf.dir}" overwrite="true"/>
        <copy file="${spnego.dir}/etc/spnego.properties" todir="${jetty.conf.dir}" overwrite="true"/>

        <echo/>
        <echo>----- rewriting files -----</echo>
        <echo/>

        <!-- mimic zmconfigd -->
        <echo>rewriting ${jetty.conf.dir}/krb5.ini</echo>
        <replace file="${jetty.conf.dir}/krb5.ini">
            <replacefilter token="%%zimbraSpnegoAuthRealm%%" value="${zimbraSpnegoAuthRealm}"/>
        </replace>

        <echo>rewriting ${jetty.conf.dir}/spnego.conf</echo>
        <replace file="${jetty.conf.dir}/spnego.conf">
            <replacefilter token="%%zimbraSpnegoAuthPrincipal%%" value="${zimbraSpnegoAuthPrincipal}"/>
        </replace>

        <echo>rewriting ${jetty.conf.dir}/spnego.properties</echo>
        <replace file="${jetty.conf.dir}/spnego.properties">
            <replacefilter token="%%zimbraSpnegoAuthTargetName%%" value="${zimbraSpnegoAuthTargetName}"/>
        </replace>

        <echo>rewriting ${jetty.conf.dir}/jetty.xml</echo>
        <replace file="${jetty.conf.dir}/jetty.xml">
            <replacefilter token="&lt;!-- zimbraSpnegoAuthEnabled" value=""/>
            <replacefilter token="zimbraSpnegoAuthEnabled --&gt;" value=""/>
        </replace>

        <echo>rewriting ${zimbra.home.dir}/bin/jetty</echo>
        <replace file="${zimbra.home.dir}/bin/jetty">
            <replacefilter token="zimbraSpnegoAuthEnabled: FALSE" value="zimbraSpnegoAuthEnabled: TRUE"/>
        </replace>
        <!-- executable permission was removed by the above replace, set it back -->
        <chmod file="${zimbra.home.dir}/bin/jetty" perm="+x"/>

        <antcall target="start-webserver"/>

    </target>

    <target name="service-deploy" depends="refresh-opt-zimbra,deploy-war"
            description="Not just war file deployment, but a /opt/zimbra refresh as well!"/>

    <target name="deploy-war" depends="stop-jetty,war,copy-war,start-jetty"/>

    <target name="copy-war">
        <delete dir="${jetty.home.dir}/webapps/service"/>
        <delete file="${jetty.home.dir}/webapps/service.war"/>
        <copy file="${warfile}" todir="${jetty.home.dir}/webapps"/>
        <mkdir dir='${jetty.home.dir}/webapps/service'/>
        <unzip dest="${jetty.home.dir}/webapps/service" src="${jetty.home.dir}/webapps/${warfilename}"/>
    </target>

    <target name="init-opt-zimbra" depends="dev-dist,localhost-ssl-cert" description="Copies build/dist to /opt/zimbra">
        <echo file="${zimbra.home.dir}/.platform">development</echo>
        <copy todir="${zimbra.home.dir}">
            <fileset dir="${dist.dir}" excludes="**/spnego.war"/>
        </copy>
        <chmod perm="a+rx">
            <fileset dir="${zimbra.home.dir}/bin"/>
            <fileset dir="${zimbra.home.dir}/libexec"/>
        </chmod>
        <!-- ant does not preserve perms on copy -->
    </target>

    <target name="refresh-opt-zimbra" depends="dev-dist">
        <copy todir="${zimbra.home.dir}" overwrite="true">
            <fileset dir="${dist.dir}">
                <exclude name="conf/localconfig.xml"/><!-- don't trash zimbra_server_hostname -->
                <exclude name="jetty/webapps/**"/><!-- deploy-war covers these -->
            </fileset>
        </copy>
        <chmod perm="a+rx">
            <fileset dir="${zimbra.home.dir}/bin"/>
            <fileset dir="${zimbra.home.dir}/libexec"/>
        </chmod>
    </target>

    <target name="enable-im">
        <antcall target="stop-webserver"/>
        <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
            <arg line="-l -v mcf zimbraXMPPEnabled TRUE"/>
        </java>
        <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
            <arg line="-l -v mc default zimbraFeatureIMEnabled TRUE"/>
        </java>
        <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
            <arg line="-l -v mc default zimbraFeatureInstantNotify TRUE"/>
        </java>
        <antcall target="start-webserver"/>
        <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
            <arg line="cxc conference ${defaultdomain.name} ${zimbra.server.hostname} org.jivesoftware.wildfire.muc.spi.MultiUserChatServerImpl conference text"/>
        </java>
    </target>

    <target name="disable-im">
        <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="false">
            <arg line="dxc conference.${defaultdomain.name}"/>
        </java>
        <antcall target="stop-webserver"/>
        <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
            <arg line="-l -v mc default zimbraFeatureIMEnabled FALSE"/>
        </java>
        <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
            <arg line="-l -v mcf zimbraXMPPEnabled FALSE"/>
        </java>
        <antcall target="start-webserver"/>
    </target>

    <!-- target called by the production build -->
    <target name="dev-dist" depends="war,dev-dist-unix,dev-dist-jetty,choose-db-schema,generate-ldap-config"
            description="Initializes build/dist">
        <trycatch>
            <try>
                <!-- bin, libexec -->
                <copy todir="${dist.dir}/bin" overwrite="true">
                    <fileset dir="${src.dir}/bin" excludes="*.production,zmmailboxdctl,jetty"/>
                </copy>
                <copy todir="${dist.dir}/libexec" overwrite="true">
                    <fileset dir="${src.dir}/libexec" excludes="*.production"/>
                </copy>
                <if>
                    <isset property="is-production"/>
                    <then>
                        <copy tofile="${dist.dir}/bin/zmmailboxdctl" file="${src.dir}/bin/zmmailboxdctl"
                              overwrite="true"/>
                    </then>
                    <else>
                        <copy tofile="${dist.dir}/bin/jetty" file="${src.dir}/bin/jetty"
                              overwrite="true"/>
                    </else>
                </if>
                <copy tofile="${dist.dir}/bin/ldap" file="${src.dir}/bin/ldap${production.suffix}" overwrite="true"/>
                <fixcrlf srcdir="${dist.dir}/bin" eol="unix"/>
                <fixcrlf srcdir="${dist.dir}/libexec" eol="unix"/>
                <chmod perm="a+rx">
                    <fileset dir="${dist.dir}/bin"/>
                    <fileset dir="${dist.dir}/libexec"/>
                </chmod>

                <!-- conf -->
                <copy todir="${dist.dir}/conf" file="${config.dir}/globs2" overwrite="true"/>
                <copy todir="${dist.dir}/conf" file="${config.dir}/globs2.zimbra" overwrite="true"/>
                <copy tofile="${dist.dir}/conf/localconfig.xml" file="${config.dir}/localconfig.xml${production.suffix}"
                      overwrite="true"/>
                <copy todir="${dist.dir}/conf" file="${config.dir}/datasource.xml" overwrite="true"/>
                <copy tofile="${dist.dir}/conf/zimbra-contact-fields.xml"
                      file="${config.dir}/contacts/zimbra-contact-fields.xml" overwrite="true"/>
                <if>
                    <not>
                        <isset property="is-production"/>
                    </not>
                    <then>
                        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
                              failonerror="true">
                            <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml"/>
                            <arg line="-e mailboxd_directory=/opt/zimbra/jetty"/>
                        </java>
                        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
                              failonerror="true">
                            <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml"/>
                            <arg line="-e mailboxd_keystore=/opt/zimbra/jetty/etc/keystore"/>
                        </java>
                        <!-- Enable SMTP to LMTP bridge for development. -->
                        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
                              failonerror="true">
                            <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml"/>
                            <arg line="-e smtp_to_lmtp_enabled=true"/>
                        </java>
                        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
                              failonerror="true">
                            <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml"/>
                            <arg line="-e ldap_read_timeout=0"/>
                        </java>
                    </then>
                </if>
                <copy tofile="${dist.dir}/conf/log4j.properties"
                      file="${config.dir}/log4j.properties${production.suffix}"
                      overwrite="true"/>
                <copy todir="${dist.dir}/conf" file="${config.dir}/magic" overwrite="true"/>
                <copy todir="${dist.dir}/conf" file="${config.dir}/magic.zimbra" overwrite="true"/>
                <copy todir="${dist.dir}/conf" file="${config.dir}/timezones.ics" overwrite="true"/>
                <copy todir="${dist.dir}/conf/msgs" overwrite="true">
                    <fileset dir="${config.dir}/msgs"/>
                </copy>
                <copy todir="${dist.dir}/conf/msgs" overwrite="true">
                    <fileset dir="${im.dir}/src/i18n"/>
                </copy>
                <copy todir="${dist.dir}/conf/attrs" overwrite="true">
                    <fileset dir="'${build.dir}/attrs'"/>
                </copy>
                <copy todir="${dist.dir}/conf/rights" overwrite="true">
                    <fileset dir="${config.dir}/rights" includes="*.xml"/>
                </copy>
            </try>
            <catch>
                <echo>Problem copying conf data in ZimbraServer/build.xml:1055. Continuing.</echo>
            </catch>
        </trycatch>
        <fixcrlf srcdir="${dist.dir}/conf" eol="unix" excludes="magic*"/>

        <!-- lib: ignore absence of DLL for windows -->
        <copy todir="${dist.dir}/lib/jars" overwrite="true">
            <fileset dir="${common.jars.dir}" includes="*.jar"/>
        </copy>
        <copy todir="${dist.dir}/lib/jars" overwrite="true">
            <fileset dir="${im.jars.dir}" includes="*.jar"/>
        </copy>
        <copy todir="${dist.dir}/lib/jars" file="${common.jarfile}" overwrite="true"/>
        <copy todir="${dist.dir}/lib/jars" file="${soap.jarfile}" overwrite="true"/>
        <copy todir="${dist.dir}/lib/jars" file="${im.jarfile}" overwrite="true"/>
        <copy todir="${dist.dir}/lib/jars" file="${jarfile}" overwrite="true"/>

        <!-- jetty windows service wrapper -->
        <if>
            <isset property="is-windows"/>
            <then>
                <echo>Copying jetty windows service wrapper files</echo>
                <copy todir="${dist.jetty.dir}/etc" file="tools/jetty/wrapper.conf"/>
                <!-- <copy todir="${dist.dir}/bin" file="tools/jetty/wrapper.exe"/> -->
                <copy todir="${dist.dir}/lib" file="tools/jetty/wrapper.jar"/>
                <copy todir="${dist.dir}/lib" file="tools/jetty/wrapper.dll"/>
            </then>
        </if>
        <trycatch>
        <try>
        <!-- openldap -->
        <copy tofile="${dist.dir}/${slapd.conf.dir}/slapd.conf" file="${slapd.conf.src}" overwrite="true"/>
        <!-- CHECK this is ok with dev build -->
        <copy todir="${dist.dir}/${slapd.etc.dir}" overwrite="true">
            <fileset dir="'${build.dir}/ldap-config'" includes="*.ldif"/>
        </copy>
        <copy todir="${dist.dir}/${slapd.etc.dir}/schema" overwrite="true">
            <fileset dir="'${build.dir}/ldap-config'" includes="*.schema"/>
        </copy>
        </try>
        <catch>
            <echo>Problem copying LDAP config on ZimbraServer/build.xml:1096. Continuing.</echo>
        </catch>
        </trycatch>
        <!-- db schema, config and jars -->
        <antcall target="db-versions-init"/>
        <copy todir="${dist.db.dir}" overwrite="true">
            <fileset dir="${src.dir}/db" includes="*.sql"/>
            <fileset dir="${db.schema.dir}" includes="*.sql"/>
            <fileset dir="${build.dir}" includes="*.sql"/>
            <filterset>
                <filter token="ZIMBRA_HOME" value="${zimbra.home.dir}/"/>
                <filter token="ZIMBRA_INSTALL" value="${zimbra.home.dir}/"/>
            </filterset>
        </copy>

        <if>
            <isset property="db-derby"/>
            <then>
                <copy todir="${dist.dir}/conf" file="${config.dir}/derby.properties" overwrite="true"/>
                <copy todir="${dist.dir}/lib" file="../ZimbraServer/tools/lib/derbytools.jar" overwrite="true"/>
                <copy todir="${dist.dir}/jetty/common/lib" file="${common.jars.dir}/derby.jar"
                      overwrite="true"/>
                <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
                      failonerror="true">
                    <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml"/>
                    <arg line="-e zimbra_class_database=com.zimbra.cs.db.Derby -f"/>
                </java>
            </then>
        </if>
        <if>
            <isset property="db-sqlite"/>
            <then>
                <copy todir="${dist.dir}/jetty/common/lib" overwrite="true">
                    <fileset file="${common.jars.dir}/sqlite*.jar"/>
                </copy>
                <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
                      failonerror="true">
                    <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml"/>
                    <arg line="-e zimbra_class_database=com.zimbra.cs.db.SQLite -f"/>
                </java>
                <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
                      failonerror="true">
                    <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml"/>
                    <arg line="-e debug_disable_mailbox_group=true -f"/>
                </java>
                <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
                      failonerror="true">
                    <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml"/>
                    <arg line="-e sqlite_cache_size=16000 -f"/>
                </java>
                <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
                      failonerror="true">
                    <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml"/>
                    <arg line="-e sqlite_page_size=2048 -f"/>
                </java>
            </then>
        </if>

    </target>

    <target name="dev-dist-unix" if="is-unix">
        <copy tofile="${dist.dir}/lib/libzimbra-native.${native.so}"
              file="${lib.dir}/libzimbra-native.${native.so}.${native.os}${native.arch}" verbose="true"
              failonerror="true"
              overwrite="true"/>
    </target>

    <target name="dev-dist-jetty">
        <copy todir="${dist.jetty.dir}/webapps" file="${warfile}" overwrite="true"/>
        <copy tofile="${dist.jetty.dir}/etc/jettyrc" file="${config.dir}/jetty-6.1/jettyrc" overwrite="true"/>
        <copy tofile="${dist.jetty.dir}/etc/jetty.xml" file="${jetty.xml.file}" overwrite="true"/>
        <copy tofile="${dist.jetty.dir}/etc/start.config" file="${config.dir}/jetty-6.1/start.config" overwrite="true"/>
        <copy tofile="${dist.jetty.dir}/etc/webdefault.xml"
              file="${config.dir}/jetty-6.1/webdefault.xml${production.suffix}" overwrite="true"/>
        <if>
            <isset property="is-windows"/>
            <then>
                <copy todir="${dist.jetty.dir}/etc" file="tools/jetty/wrapper.conf"/>
            </then>
        </if>
        <copy tofile="${dist.jetty.dir}/resources/log4j.properties"
              file="${config.dir}/jetty-6.1/log4j.properties${production.suffix}" overwrite="true"/>
        <copy todir="${dist.jetty.dir}/common/lib" overwrite="true">
            <fileset dir="${common.jars.dir}"
                     includes="${ical4j.jar},${ziputil.jar},${memcached.jar},${db.driver.jar},mail.jar,zimbra-native.jar,bcprov-jdk15-146.jar,commons-cli*.jar,commons-codec*.jar,commons-dbcp*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-logging.jar,commons-pool*.jar,yuicompressor*jar,dom4j*.jar,ganymed-ssh2*.jar,jaxen*.jar,jcommon*.jar,jfreechart*.jar,junit*.jar,jzlib.jar,mina*.jar,nekohtml.jar,tnef*.jar,xercesImpl*.jar,xpp3.jar,libidn*.jar,jdom*.jar,json.jar,testng*.jar,guava*.jar"/>
        </copy>
        <copy todir="${dist.jetty.dir}/common/endorsed" overwrite="true">
            <fileset dir="${common.jars.dir}" includes="zimbra-charset.jar"/>
        </copy>
        <copy todir="${dist.jetty.dir}/common/lib" file="${common.jarfile}" overwrite="true"/>
        <copy todir="${dist.jetty.dir}/lib" overwrite="true">
            <fileset dir="${common.jars.dir}" includes="log4j*.jar,apache-log4j-extras-1.0.jar"/>
        </copy>
    </target>

    <target name="init-jetty" depends="build-init" description="Initializes the jetty directory structure">
        <delete dir="${zimbra.home.dir}/data/tmp/jetty"/>
        <mkdir dir="${jetty.home.dir}/logs"/>
        <mkdir dir="${jetty.home.dir}/webapps"/>
        <mkdir dir="${jetty.home.dir}/work"/>
        <mkdir dir="${jetty.home.dir}/work/service"/>
        <mkdir dir="${jetty.home.dir}/work/zimbra"/>
        <mkdir dir="${jetty.home.dir}/work/zimbraAdmin"/>
        <mkdir dir="${jetty.home.dir}/webapps/zimlet"/>
        <mkdir dir="${zimbra.home.dir}/data/tmp/jetty"/>
    </target>

    <target name="install-thirdparty" depends="install-thirdparty-unix,install-thirdparty-windows"
            description="Installs third party binaries"/>

    <target name="install-thirdparty-unix" description="Installs third party binaries on unix" if="is-unix">
        <if>
            <available file="../ZimbraServer/src/perl/install-thirdparty"/> <!-- Not available for community build. -->
            <then>
                <antcall target="stop-webserver"/>
                <antcall target="stop-ldap"/>
                <exec failonerror="true" executable="../ZimbraServer/src/perl/install-thirdparty">
                    <arg line="HELIX"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="install-thirdparty-windows" depends="stop-webserver" description="Installs Jetty on Windows"
            if="is-windows">
        <delete dir="${jetty.home.dir}"/>
        <delete dir="${zimbra.home.dir}/data/tmp/jetty"/>
        <untar src="${jetty.src.dir}/jetty-${jetty.version}.tar.gz" compression="gzip" dest="${zimbra.home.dir}"
               overwrite="true"/>
        <move toDir="${jetty.home.dir}">
            <fileset dir="${zimbra.home.dir}/jetty-${jetty.version}"/>
        </move>
        <delete file="'${build.dir}/jetty-${jetty.version}.tar'"/>
    </target>

    <target name="reset-all" depends="install-thirdparty,init-jetty,reset-the-world"
            description="Reset the world plus jetty and OpenLDAP">
        <ant dir="../ZimbraWebClient" target="clean" inheritAll="false"/>
        <ant dir="../ZimbraWebClient" target="admin-deploy" inheritAll="false"/>
        <ant dir="../ZimbraWebClient" target="clean" inheritAll="false"/>
        <ant dir="../ZimbraWebClient" target="deploy" inheritAll="false"/>
        <ant dir="../Zimlet" target="clean" inheritAll="false"/>
        <ant dir="../Zimlet" target="deploy" inheritAll="false"/>
    </target>

    <!-- There are two ways to reset the world:
           (a) If your webserver is a service, use "reset-the-world".
           (b) If your webserver  container  is inside eclipse then do this:
             1. stop web server
             2. run the target "reset-the-world-stage1"
             3. start web server
             4. run the target "reset-the-world-stage2" -->
    <target name="reset-the-world" description="Reset the world">
        <antcall target="reset-the-world-stage1"/>
        <antcall target="upgrade-domain-admin"/>
        <antcall target="reset-the-world-stage2"/>
    </target>

    <target name="reset-the-world-stage1" depends="clean-opt-zimbra,clean,init"
            description="Cleans deployed files, compiles, and initializes /opt/zimbra."/>

    <target name="reset-the-world-stage2" depends="deploy-war,init-unittest"
            description="Run when web server is running.">
        <antcall target="inject">
            <param name="account-to-inject.email" value="user1@${defaultdomain.name}"/>
        </antcall>
    </target>

    <target name="init" depends="stop-servers,stop-ldap,dir-init,init-opt-zimbra,db-init,start-ldap,ldap-load"/>

    <target name="inject" depends="compile">
        <if>
            <not>
                <isset property="email-only"/>
            </not>
            <then>
                <echo>Inserting default contacts:
                    ${account-to-inject.email}
                </echo>
                <java classname="com.zimbra.common.soap.SoapTestHarness"
                      fork="true" classpathref="class.path" failonerror="true">
                    <sysproperty key="SAMPLE_USER"
                                 value="${account-to-inject.email}"/>
                    <arg line="-s -f data/soap/samplecontacts.xml"/>
                </java>
            </then>
        </if>
        <echo>Creating default search folders:
            ${account-to-inject.email}
        </echo>
        <java classname="com.zimbra.common.soap.SoapTestHarness"
              fork="true" classpathref="class.path" failonerror="true">
            <sysproperty key="SAMPLE_USER" value="${account-to-inject.email}"/>
            <arg line="-s -f data/soap/samplesearchfolders.xml"/>
        </java>
        <echo message="Wait for lmtp host=${lmtp.host} port=${lmtp.port}"/>
        <waitfor checkevery="1" checkeveryunit="second" maxwait="60"
                 maxwaitunit="second" timeoutproperty="lmtp.timeout">
            <socket server="${lmtp.host}" port="${lmtp.port}"/>
        </waitfor>
        <fail message="lmtp port ${lmtp.port} not open.">
            <condition>
                <isset property="lmtp.timeout"/>
            </condition>
        </fail>

        <if>
            <available file="data/TestMailRaw"/> <!-- Not available for community builds -->
            <then>
                <echo>LmtpInject messages for
                    ${account-to-inject.email}
                </echo>
                <java classname="com.zimbra.cs.lmtpserver.utils.LmtpInject"
                      fork="true" classpathref="class.path" failonerror="true">
                    <arg
                            line="-t ${lmtpinject.numthreads} -a ${lmtp.host} -p ${lmtp.port} -r ${account-to-inject.email} -s ho@example.zimbra.com -d"/>
                    <arg path="data/TestMailRaw"/>
                </java>
            </then>
        </if>

        <if>
            <available file="data/TestMailSpam"/>  <!-- Not available for community builds -->
            <then>
                <echo>LmtpInject spam for
                    ${account-to-inject.email}
                </echo>
                <java classname="com.zimbra.cs.lmtpserver.utils.LmtpInject"
                      fork="true" classpathref="class.path" failonerror="true">
                    <arg
                            line="-t ${lmtpinject.numthreads} -a ${lmtp.host} -p ${lmtp.port} -r ${account-to-inject.email} -s ho@example.zimbra.com -d"/>
                    <arg path="data/TestMailSpam"/>
                    <arg line="--noValidation"/>
                </java>
            </then>
        </if>

    </target>

    <target name="inject-npscontacts" depends="compile">
        <echo>Inserting NPS contacts: user4@${zimbra.server.hostname}</echo>
        <java classname="com.zimbra.common.soap.SoapTestHarness" fork="true" classpathref="class.path"
              failonerror="true">
            <arg line="-f data/soap/nps-contacts-orig.xml"/>
        </java>
    </target>

    <target name="init-unittest">
        <copy todir="${zimbra.home.dir}/unittest" overwrite="true">
            <fileset dir="data/unittest" includes="**"/>
        </copy>
    </target>

    <!-- Insert one directory (data/testmsgs) of mail -->
    <target name="inject1" depends="compile">
        <echo message="Wait for lmtp host=${lmtp.host} port=${lmtp.port}"/>
        <waitfor checkevery="1" checkeveryunit="second" maxwait="60" maxwaitunit="second">
            <socket server="${lmtp.host}" port="${lmtp.port}"/>
        </waitfor>
        <echo>LmtpInject messages</echo>
        <java classname="com.zimbra.cs.lmtpserver.utils.LmtpInject" fork="true" classpathref="class.path"
              failonerror="true">
            <arg line="-t ${lmtpinject.numthreads} -a ${lmtp.host} -p ${lmtp.port} -r user1@${zimbra.server.hostname} -s user1@example.zimbra.com -d"/>
            <arg path="data/TestMailRaw"/>
        </java>
    </target>

    <target name="localhost-ssl-cert">
        <delete failonerror="no">
            <fileset dir="${jetty.conf.dir}" includes="keystore"/>
        </delete>
        <genkey alias="jetty" storepass="zimbra" keyalg="rsa" verbose="false" keystore="${jetty.conf.dir}/keystore"
                validity="365">
            <dname>
                <param name="CN" value="localhost"/>
                <param name="OU" value="Engineering"/>
                <param name="O" value="Zimbra Systems"/>
                <param name="L" value="Palo Alto"/>
                <param name="S" value="California"/>
                <param name="C" value="US"/>
            </dname>
        </genkey>
        <genkey alias="jetty-dsa" storepass="zimbra" keyalg="dsa" verbose="false" keystore="${jetty.conf.dir}/keystore"
                validity="365">
            <dname>
                <param name="CN" value="localhost"/>
                <param name="OU" value="Engineering"/>
                <param name="O" value="Zimbra Systems"/>
                <param name="L" value="Palo Alto"/>
                <param name="S" value="California"/>
                <param name="C" value="US"/>
            </dname>
        </genkey>
    </target>

    <target name="keystore-backup">
        <mkdir dir="${zimbra.home.dir}/conf/keystore-backup"/>
        <copy file="${jetty.conf.dir}/keystore" tofile="${zimbra.home.dir}/conf/keystore-backup/keystore.backup"
              overwrite="true"/>
    </target>

    <target name="keystore-restore">
        <copy file="${zimbra.home.dir}/conf/keystore-backup/keystore.backup" tofile="${jetty.conf.dir}/keystore"
              overwrite="true"/>
    </target>

    <target name="dir-init" description="Creates directories in /opt/zimbra">
        <echo message="If the following deletes fail, wait for your web server"/>
        <echo message="to stop (or stop jetty manually)"/>
        <echo message="and try again later."/>
        <delete failonerror="no">
            <fileset dir="${zimbra.home.dir}/db" excludes="data/**"/>
        </delete>

        <delete dir="${zimbra.home.dir}/zmstat"/>
        <delete dir="${zimbra.store.dir}"/>
        <delete dir="${zimbra.index.dir}"/>
        <delete dir="${zimbra.home.dir}/redolog"/>
        <delete dir="${zimbra.home.dir}/backup"/>
        <delete dir="${zimbra.home.dir}/lib/ext"/>
        <delete dir="${zimbra.home.dir}/conf/attrs"/>
        <delete dir="${zimbra.home.dir}/conf/rights"/>
        <delete dir="${zimbra.home.dir}/conf/msgs"/>
        <delete dir="${zimbra.home.dir}/data"/>
        <delete failonerror="no">
            <fileset dir="${zimbra.home.dir}/log" includes="*.log"/>
        </delete>
        <antcall target="dir-init-jetty"/>


        <mkdir dir="${zimbra.home.dir}/data"/>
        <mkdir dir="${zimbra.home.dir}/data/ldap"/>
        <mkdir dir="${zimbra.home.dir}/data/ldap/hdb"/>
        <mkdir dir="${zimbra.home.dir}/data/ldap/hdb/db"/>
        <mkdir dir="${zimbra.home.dir}/data/ldap/hdb/logs"/>
        <mkdir dir="${zimbra.home.dir}/data/ldap/config"/>
        <mkdir dir="${zimbra.home.dir}/data/mailboxd/imap/cache"/>

        <mkdir dir="${zimbra.home.dir}/openldap/var/run"/>
        <mkdir dir="${zimbra.home.dir}/log"/>
        <mkdir dir="${zimbra.home.dir}/zmstat"/>
        <mkdir dir="${zimbra.store.dir}"/>
        <mkdir dir="${zimbra.index.dir}"/>
        <mkdir dir="${zimbra.home.dir}/redolog"/>
        <mkdir dir="${zimbra.home.dir}/redolog/archive"/>
        <mkdir dir="${zimbra.home.dir}/backup"/>
        <mkdir dir="${zimbra.home.dir}/zimlets-deployed"/>
        <antcall target="make-dirs">
            <param name="base.dir" value="${zimbra.home.dir}"/>
        </antcall>
    </target>

    <target name="dir-init-jetty">
        <delete failonerror="no">
            <fileset dir="${jetty.home.dir}/logs" includes="*"/>
        </delete>
        <delete dir="${jetty.home.dir}/webapps/service"/>
        <delete file="${jetty.home.dir}/webapps/service.war"/>
    </target>

    <target name="choose-db-schema">
        <condition property="db.schema.dir" value="src/db/sqlite">
            <isset property="db-sqlite"/>
        </condition>
        <condition property="db.schema.dir" value="src/db/derby">
            <isset property="db-derby"/>
        </condition>
        <condition property="db.schema.dir" value="src/db/mysql">
            <isset property="db-mysql"/>
        </condition>
        <echo>Using database schema in ${db.schema.dir}</echo>
    </target>

    <target name="db-init" depends="choose-db-schema,mysql-init,sqlite-init,derby-init"/>

    <target name="derby-init" if="db-derby">
        <delete dir="${zimbra.derby.dir}"/>
        <java classname="org.apache.derby.tools.ij" fork="true" classpathref="class.path" failonerror="true">
            <arg file="${dist.db.dir}/init.sql"/>
        </java>
    </target>

    <target name="mysql-init" if="db-mysql">
        <sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://127.0.0.1:7306/" userid="root" password="zimbra"
             classpathref="class.path" onerror="continue" src="${db.schema.dir}/dropdb.sql" print="false"/>
        <sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://127.0.0.1:7306/" userid="root" password="zimbra"
             classpathref="class.path" onerror="abort" src="${db.schema.dir}/db.sql"/>
        <sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://127.0.0.1:7306/" userid="root" password="zimbra"
             classpathref="class.path" onerror="abort" src="'${build.dir}/versions-init.sql'"/>
    </target>

    <target name="sqlite-init" if="db-sqlite">
        <delete dir="${zimbra.sqlite.dir}"/>
        <mkdir dir="${zimbra.sqlite.dir}"/>
        <exec executable="sqlite3" dir="${zimbra.sqlite.dir}" failonerror="true" input="${dist.db.dir}/init.sql">
            <arg line="zimbra.db"/>
        </exec>
    </target>

    <target name="ldap-setup-preauth">
        <echo>Creating preauth key: ${zimbra.server.hostname}</echo>
        <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
            <arg line="gdpak ${zimbra.server.hostname}"/>
        </java>
    </target>
    <!-- description="run this target if you have updated the schema files in /opt/zimbra, and you have generated new ldifs" -->
    <target name="refresh-ldap">
        <antcall target="stop-webserver"/>
        <antcall target="stop-ldap"/>
        <sleep seconds="2"/>
        <!-- sometimes start occurs too fast... -->
        <antcall target="start-ldap"/>
        <antcall target="start-webserver"/>
        <antcall target="ldap-modify">
            <param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_globalconfig.ldif"/>
        </antcall>
        <antcall target="ldap-modify">
            <param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_defaultcos.ldif"/>
        </antcall>
        <antcall target="ldap-modify">
            <param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_mimehandlers.ldif"/>
        </antcall>
    </target>

    <!--
        Run this target after changing ldap schema in ZimbraServer/conf/attrs/zimbra-attrs.xml
        Note: this target does not set the default value for attrs.  It only make the schema
        change effective.
    -->
    <target name="refresh-ldap-schema">
        <antcall target="stop-webserver"/>
        <antcall target="stop-ldap"/>
        <sleep seconds="2"/>

        <delete dir="'${build.dir}/attrs'"/>
        <delete dir="'${build.dir}/ldap-config'"/>
        <antcall target="generate-ldap-config"/>

        <!-- dist ldap schem and ldif files -->
        <copy todir="${dist.dir}/conf/attrs" overwrite="true">
            <fileset dir="'${build.dir}/attrs'"/>
        </copy>
        <copy todir="'${dist.dir}/${slapd.etc.dir}'" overwrite="true">
            <fileset dir="'${build.dir}/ldap-config'" includes="*.ldif"/>
        </copy>
        <copy todir="${dist.dir}/${slapd.etc.dir}/schema" overwrite="true">
            <fileset dir="'${build.dir}/ldap-config'" includes="*.schema"/>
        </copy>

        <!-- copy zimbra-attrs.xml(need by AttributeManager) and schema files to OpenLDAP schema dir -->
        <copy todir="'${zimbra.home.dir}/conf/attrs'" overwrite="true">
            <fileset dir="'${dist.dir}/conf/attrs'"/>
        </copy>
        <copy todir="'${zimbra.home.dir}/${slapd.etc.dir}/schema'" overwrite="true">
            <fileset dir="'${dist.dir}/${slapd.etc.dir}/schema'" includes="*.schema"/>
        </copy>

        <!-- sometimes start occurs too fast... -->
        <antcall target="start-ldap"/>
        <antcall target="start-webserver"/>
    </target>

    <target name="ldap-add">
        <echo>Loading ${ldif.file}</echo>
        <exec failonerror="true" executable="${ldapmodify}">
            <arg line="-a -c -w zimbra -D cn=config -x -f ${ldif.file}"/>
        </exec>
    </target>

    <target name="ldap-modify">
        <echo>Loading ${ldif.file}</echo>
        <exec failonerror="true" executable="${ldapmodify}">
            <arg line="-c -w zimbra -D cn=config -x -f ${ldif.file}"/>
        </exec>
    </target>

    <target name="ldap-load">
        <waitfor checkevery="5" checkeveryunit="second" maxwait="60" maxwaitunit="second"
                 timeoutproperty="ldap.timeout">
            <socket server="${ldap.host}" port="${ldap.port}"/>
        </waitfor>
        <fail message="ldap server is not running on port ${ldap.port}.">
            <condition>
                <isset property="ldap.timeout"/>
            </condition>
        </fail>
        <antcall target="ldap-add">
            <param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra.ldif"/>
        </antcall>
        <antcall target="ldap-add">
            <param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_globalconfig.ldif"/>
        </antcall>
        <antcall target="ldap-add">
            <param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_defaultcos.ldif"/>
        </antcall>
        <antcall target="ldap-add">
            <param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_mimehandlers.ldif"/>
        </antcall>
        <echo>Editing localconfig zimbra_server_hostname to be ${zimbra.server.hostname}</echo>
        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
              failonerror="true">
            <arg line="-e zimbra_server_hostname=${zimbra.server.hostname}"/>
        </java>
        <echo>Editing localconfig zimbra_user to be ${zimbra.user}</echo>
        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
              failonerror="true">
            <arg line="-e zimbra_user=${zimbra.user}"/>
        </java>
        <echo>Running zmprov commands</echo>
        <antcall target="run-zmprov-commands"/>
    </target>

    <target name="zmlocalconfig">
        <echo>Running localconfig with with argument: ${localconfig-args}</echo>
        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
              failonerror="true">
            <arg line="${localconfig-args}"/>
        </java>
    </target>

    <target name="run-zmprov-commands" depends="zmprov-commands">
        <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
            <arg line="-l -f ${build.zmprov} -v"/>
        </java>
    </target>

    <target name="zmprov-commands">
        <antcall target="generate-zmprov-commands"/>
    </target>

    <target name="generate-zmprov-commands">
        <!--
           params/properties:
               zimbra.server.hostname
               zimbra.user
               zimbra.smtp.host
               zimbra.prefGroupMailBy
               defaultdomain.name
        -->
        <echo file="${build.zmprov}">
            ModifyConfig zimbraLogHostname ${zimbra.server.hostname}
            ModifyConfig zimbraRemoteManagementUser ${zimbra.user}
            ModifyConfig zimbraBackupReportEmailRecipients '"Backup Admin" &lt;user2@${defaultdomain.name}&gt;'
            ModifyConfig zimbraBackupReportEmailSender '"Backup Daemon" &lt;admin@${defaultdomain.name}&gt;'
            CreateServer ${zimbra.server.hostname} \
            zimbraSmtpHostname ${zimbra.smtp.host} \
            zimbraSmtpPort 7024 \
            zimbraMailPort 7070 \
            zimbraMailSSLPort 7443 \
            zimbraMailSSLClientCertPort 9443 \
            zimbraMailMode http \
            zimbraMailSSLClientCertMode WantClientAuth \
            zimbraImapCleartextLoginEnabled TRUE \
            zimbraPop3CleartextLoginEnabled TRUE \
            zimbraSoapExposeVersion TRUE
            ModifyServer ${zimbra.server.hostname} \
            zimbraServiceInstalled ldap \
            zimbraServiceInstalled mta \
            zimbraServiceInstalled mailbox
            ModifyServer ${zimbra.server.hostname} \
            zimbraServiceEnabled ldap \
            zimbraServiceEnabled mta \
            zimbraServiceEnabled mailbox
            ModifyServer ${zimbra.server.hostname} zimbraMailPurgeSleepInterval 0
            cd ${defaultdomain.name} \
            zimbraGalInternalSearchBase ROOT
            mcf zimbraDefaultDomainName ${defaultdomain.name}
            mc default zimbraFeatureIMEnabled FALSE
            ca admin@${defaultdomain.name} test123 \
            zimbraMailHost ${zimbra.server.hostname} \
            cn 'Administrator' displayName 'Administrator' \
            zimbraIsAdminAccount TRUE \
            zimbraAdminConsoleUIComponents cartBlancheUI \
            zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
            telephoneNumber '+1 650 555 0000'
            ca domainadmin@${defaultdomain.name} test123 \
            zimbraMailHost ${zimbra.server.hostname} \
            cn 'Domain Administrator' displayName 'Domain Administrator' \
            zimbraIsDomainAdminAccount TRUE \
            zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
            telephoneNumber '+1 650 555 0000'
            ca user1@${defaultdomain.name} test123 \
            zimbraMailHost ${zimbra.server.hostname} \
            cn 'Demo User One' \
            displayName 'Demo User One' \
            zimbraMailQuota 62914560 \
            zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
            zimbraPrefMailPollingInterval 12h \
            zimbraPrefWarnOnExit FALSE \
            zimbraForeignPrincipal kerberos5:user1@${zimbra.kerberos.realm} \
            telephoneNumber '+1 650 555 1111'
            ca user2@${defaultdomain.name} test123 \
            zimbraMailHost ${zimbra.server.hostname} \
            cn 'Demo User Two' \
            displayName 'Demo User Two' \
            zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
            zimbraPrefMailPollingInterval 12h \
            zimbraPrefWarnOnExit FALSE \
            telephoneNumber '+1 650 555 2222'
            ca user3@${defaultdomain.name} test123 \
            zimbraMailHost ${zimbra.server.hostname} \
            cn 'Demo User Three' \
            displayName 'Demo User Three' \
            zimbraAttachmentsIndexingEnabled FALSE \
            zimbraPrefTimeZoneId '(GMT-05.00) Eastern Time (US &amp; Canada)' \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
            zimbraPrefMailPollingInterval 12h \
            zimbraPrefWarnOnExit FALSE \
            telephoneNumber '+1 650 555 3333'
            ca user4@${defaultdomain.name} test123 \
            zimbraMailHost ${zimbra.server.hostname} \
            cn 'Demo User Four' \
            displayName 'Demo User Four' \
            zimbraAttachmentsIndexingEnabled FALSE \
            zimbraPrefTimeZoneId '(GMT-07.00) Arizona' \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
            zimbraPrefMailPollingInterval 12h \
            zimbraPrefWarnOnExit FALSE \
            telephoneNumber '+1 650 555 4444'
            ca spam-sink@${defaultdomain.name} test123 \
            zimbraMailHost ${zimbra.server.hostname} \
            zimbraAttachmentsIndexingEnabled FALSE \
            zimbraMailQuota 0 \
            zimbraHideInGal TRUE
            mcf zimbraSpamIsSpamAccount spam-sink@${defaultdomain.name}
            ca ham-sink@${defaultdomain.name} test123 \
            zimbraMailHost ${zimbra.server.hostname} \
            zimbraAttachmentsIndexingEnabled FALSE \
            zimbraMailQuota 0 \
            zimbraHideInGal TRUE
            mcf zimbraSpamIsNotSpamAccount ham-sink@${defaultdomain.name}
            ccr room-mississippi@${defaultdomain.name} test123 \
            displayName 'Mississippi Conference Room' \
            description 'Projector, DVD' \
            zimbraNotes 'The door squeaks.' \
            zimbraCalResType Location \
            zimbraCalResAutoAcceptDecline TRUE \
            zimbraCalResAutoDeclineIfBusy TRUE \
            zimbraCalResAutoDeclineRecurring FALSE \
            zimbraCalResMaxNumConflictsAllowed 3 \
            zimbraCalResMaxPercentConflictsAllowed 10 \
            zimbraCalResLocationDisplayName 'Site: HQ, Building: A, Floor: 11, Room 1101' \
            zimbraCalResSite HQ \
            zimbraCalResBuilding A \
            zimbraCalResFloor 11 \
            zimbraCalResRoom 1101 \
            zimbraCalResCapacity 10 \
            zimbraCalResContactName 'Administrator' \
            zimbraCalResContactEmail admin@${defaultdomain.name} \
            zimbraCalResContactPhone '(650)555-1212' \
            street '1500 Fashion Island Blvd., Suite 100' \
            l 'San Mateo' \
            st 'California' \
            postalCode 94404 \
            co USA \
            zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}
            ccr room-amazon@${defaultdomain.name} test123 \
            displayName 'Amazon Conference Room' \
            description 'TV, VCR; room is always available' \
            zimbraNotes 'A/C not working well' \
            zimbraCalResType Location \
            zimbraCalResAutoAcceptDecline TRUE \
            zimbraCalResAutoDeclineIfBusy FALSE \
            zimbraCalResAutoDeclineRecurring FALSE \
            zimbraCalResLocationDisplayName 'Room 1201, 2nd Floor of Building A at HQ' \
            zimbraCalResSite HQ \
            zimbraCalResBuilding A \
            zimbraCalResFloor 12 \
            zimbraCalResRoom 1202 \
            zimbraCalResCapacity 20 \
            zimbraCalResContactName 'Administrator' \
            zimbraCalResContactEmail admin@${defaultdomain.name} \
            zimbraCalResContactPhone '(650)555-1212' \
            zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}
            ccr room-nile@${defaultdomain.name} test123 \
            displayName 'Nile Conference Room' \
            description 'Projector; for single meetings only' \
            zimbraNotes 'need to get some more chairs in here' \
            zimbraCalResType Location \
            zimbraCalResAutoAcceptDecline TRUE \
            zimbraCalResAutoDeclineIfBusy TRUE \
            zimbraCalResAutoDeclineRecurring TRUE \
            zimbraCalResLocationDisplayName 'Room B201, 2nd basement floor, HQ Building B' \
            zimbraCalResSite HQ \
            zimbraCalResBuilding B \
            zimbraCalResFloor B2 \
            zimbraCalResRoom B201 \
            zimbraCalResCapacity 100 \
            zimbraCalResContactName 'Administrator' \
            zimbraCalResContactEmail admin@${defaultdomain.name} \
            zimbraCalResContactPhone '(650)555-1212' \
            zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}
            ccr projector1@${defaultdomain.name} test123 \
            displayName 'Projector' \
            description '800x600 max resolution' \
            zimbraNotes 'usually works okay' \
            zimbraCalResType Equipment \
            zimbraCalResAutoAcceptDecline FALSE \
            zimbraCalResAutoDeclineIfBusy FALSE \
            zimbraCalResAutoDeclineRecurring FALSE \
            zimbraCalResLocationDisplayName 'HQ Building B, B2 floor' \
            zimbraCalResSite HQ \
            zimbraCalResBuilding B \
            zimbraCalResFloor B2 \
            zimbraCalResRoom B201 \
            zimbraCalResContactName 'Administrator' \
            zimbraCalResContactEmail admin@${defaultdomain.name} \
            zimbraCalResContactPhone '(650)555-1212' \
            zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}
            ccr pencil1@${defaultdomain.name} test123 \
            displayName '#2 pencil' \
            description 'a writing tool' \
            zimbraNotes 'must occasionally be sharpened' \
            zimbraCalResType Equipment \
            zimbraCalResAutoAcceptDecline TRUE \
            zimbraCalResAutoDeclineIfBusy TRUE \
            zimbraCalResAutoDeclineRecurring TRUE \
            street '1500 Fashion Island Blvd, Suite 100' \
            l 'San Mateo' \
            st CA \
            postalCode 94404 \
            co USA \
            zimbraCalResContactName 'Administrator' \
            zimbraCalResContactEmail admin@${defaultdomain.name} \
            zimbraCalResContactPhone '(650)555-1212' \
            zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}
            cd example.com
            cdl admin-team@example.com
            cdl client-team@example.com
            cdl qa-team@example.com
            cdl server-team@example.com
            grr domain example.com dom ${defaultdomain.name} viewDistList
        </echo>
    </target>

    <target name="family-delete" depends="compile">
        <property name="data.dir" value="${build.dir}/data"/>
        <property name="family.delete" value="${data.dir}/zmprov-family-delete.txt"/>
        <property name="family.delete.out" value="${data.dir}/zmprov-family-delete-out.txt"/>

        <echo file="${family.delete}"/>

        <!-- child accounts -->
        <for list="1,2,3" param="idx">
            <sequential>
                <echo file="${family.delete}" append="true">da family-child@{idx}-visible@${defaultdomain.name}
                </echo>
            </sequential>
        </for>
        <for list="4,5,6" param="idx">
            <sequential>
                <echo file="${family.delete}" append="true">da family-child@{idx}-invisible@${defaultdomain.name}
                </echo>
            </sequential>
        </for>

        <!-- parent account -->
        <echo file="${family.delete}" append="true">
            da family-parent@${defaultdomain.name}
        </echo>

        <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true"
              output="${family.delete.out}">
            <arg line="-l -f ${family.delete}"/>
        </java>
    </target>

    <target name="family-init" depends="compile">
        <echo>Deleting family accounts</echo>
        <antcall target="family-delete"/>

        <echo>Creating family accounts</echo>
        <java classname="com.zimbra.common.soap.SoapTestHarness" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="DOMAIN_NAME" value="${defaultdomain.name}"/>
            <sysproperty key="ADMIN_USER" value="admin@${defaultdomain.name}"/>
            <sysproperty key="ADMIN_PASSWORD" value="test123"/>
            <arg line="-s -d -f ${samplefamilyaccounts.file}"/>
        </java>

        <!-- inject test data for family parent and child -->
        <for list="family-parent,family-child1-visible" param="accountName">
            <sequential>
                <antcall target="inject">
                    <param name="account-to-inject.email" value="@{accountName}@${defaultdomain.name}"/>
                </antcall>
            </sequential>
        </for>
    </target>

    <target name="stop-servers" depends="stop-webserver,stop-ldap"/>

    <!-- LDAP service control -->
    <target name="stop-ldap" depends="stop-ldap-windows,stop-ldap-unix"/>

    <target name="stop-ldap-windows" if="is-windows">
        <exec executable="net">
            <arg value="stop"/>
            <arg value="${ldap.service.windows}"/>
        </exec>
    </target>

    <target name="stop-ldap-unix" if="is-unix">
        <if>
            <and>
                <available file="${zimbra.home.dir}/bin/ldap" type="file"/>
                <available file="${zimbra.home.dir}/openldap"/>
            </and>
            <then>
                <exec executable="${zimbra.home.dir}/bin/ldap">
                    <arg value="stop"/>
                </exec>
            </then>
            <else>
                <echo>OpenLDAP not installed; skipping OpenLDAP stop</echo>
            </else>
        </if>
    </target>

    <target name="start-ldap" depends="start-ldap-windows,start-ldap-unix"/>

    <target name="start-ldap-windows" if="is-windows">
        <exec executable="net">
            <arg value="start"/>
            <arg value="${ldap.service.windows}"/>
        </exec>
    </target>

    <target name="start-ldap-unix" if="is-unix">
        <exec executable="${zimbra.home.dir}/bin/ldap">
            <arg value="start"/>
        </exec>
    </target>

    <target name="start-jetty-windows" if="is-windows">
        <if>
            <isset property="jetty-use-service"/>
            <then>
                <exec executable="net">
                    <arg value="start"/>
                    <arg value="jetty"/>
                </exec>
            </then>
            <else>
                <antcall target="start-jetty-java"/>
            </else>
        </if>
    </target>

    <target name="start-jetty-unix" if="is-unix">
        <exec executable="${zimbra.home.dir}/bin/jetty">
            <arg value="start"/>
        </exec>
    </target>

    <target name="start-jetty" depends="start-jetty-windows,start-jetty-unix">
        <echo>Waiting for jetty to start</echo>
        <waitfor checkevery="1" checkeveryunit="second" maxwait="60" maxwaitunit="second"
                 timeoutproperty="jetty.timeout">
            <http url="http://${deploy.host}:${deploy.port}/service/soap" errorsBeginAt="500"/>
        </waitfor>
        <fail message="jetty is not running on port ${deploy.port}.  check mailbox.log for any error.">
            <condition>
                <isset property="jetty.timeout"/>
            </condition>
        </fail>
    </target>

    <target name="stop-jetty-windows" if="is-windows">
        <if>
            <isset property="jetty-use-service"/>
            <then>
                <exec executable="net">
                    <arg value="stop"/>
                    <arg value="jetty"/>
                </exec>
            </then>
            <else>
                <antcall target="stop-jetty-java"/>
            </else>
        </if>
    </target>

    <target name="stop-jetty-unix" if="is-unix">
        <if>
            <available file="${zimbra.home.dir}/bin/jetty" type="file"/>
            <then>
                <exec executable="${zimbra.home.dir}/bin/jetty">
                    <arg value="stop"/>
                </exec>
            </then>
            <else>
                <echo>Jetty not installed; skipping jetty stop</echo>
            </else>
        </if>
    </target>

    <target name="stop-jetty" depends="stop-jetty-windows,stop-jetty-unix">
        <echo>Waiting for jetty to stop</echo>
        <waitfor checkevery="1" checkeveryunit="second" maxwait="10" maxwaitunit="second">
            <not>
                <http url="http://${deploy.host}:${deploy.port}/"/>
            </not>
        </waitfor>
    </target>

    <target name="start-jetty-java">
        <java dir="${jetty.home.dir}" jar="${jetty.home.dir}/start.jar" fork="true" spawn="true">
            <sysproperty key="java.library.path" value="${zimbra.home.dir}/lib"/>
            <sysproperty key="START" value="${jetty.conf.dir}/start.config"/>
            <sysproperty key="STOP.PORT" value="7867"/>
            <sysproperty key="STOP.KEY" value="stop"/>
            <sysproperty key="zimbra.config" value="${zimbra.home.dir}/conf/localconfig.xml"/>
        </java>
    </target>

    <target name="stop-jetty-java">
        <java dir="${jetty.home.dir}" jar="${jetty.home.dir}/start.jar" fork="true" failonerror="true">
            <sysproperty key="STOP.PORT" value="7867"/>
            <sysproperty key="STOP.KEY" value="stop"/>
            <arg value="--stop"/>
        </java>
    </target>

    <target name="restart-jetty" depends="stop-jetty,start-jetty"/>

    <target name="start-webserver">
        <antcall target="start-jetty"/>
    </target>

    <target name="stop-webserver" description="Stops Jetty.  If Jetty is not installed, does nothing.">
        <if>
            <isset property="jetty.start.jar.exists"/>
            <then>
                <antcall target="stop-jetty"/>
            </then>
        </if>
    </target>

    <target name="restart-webserver" depends="stop-webserver,start-webserver"/>

    <target name="empty"/>


    <property name="zimbra.alt.hostname" value="${env.ZIMBRA_ALTERNATE_HOSTNAME}"/>
    <property name="build.zmprov.altserver" location="${build.dir}/data/zmprov-2.txt"/>
    <property name="jetty.alt.dir" location="${zimbra.home.dir}/jetty-2"/>
    <property name="dist.jetty.alt.dir" location="${dist.dir}/jetty-2"/>

    <target name="server2-provision-ldap">
        <echo file="${build.zmprov.altserver}">
            da user5@${defaultdomain.name}
            ds ${zimbra.alt.hostname}

            cs ${zimbra.alt.hostname} \
            zimbraSmtpHostname ${zimbra.smtp.host} \
            zimbraMailPort 11070 \
            zimbraMailMode http \
            zimbraAdminPort 11071 \
            zimbraLmtpBindPort 11025 \
            zimbraImapBindPort 11143 \
            zimbraImapSSLBindPort 11993 \
            zimbraImapCleartextLoginEnabled TRUE \
            zimbraPop3BindPort 11110 \
            zimbraPop3SSLBindPort 11995 \
            zimbraPop3CleartextLoginEnabled TRUE \
            zimbraSoapExposeVersion TRUE \
            zimbraXMPPEnabled FALSE
            ms ${zimbra.alt.hostname} \
            zimbraServiceInstalled ldap \
            zimbraServiceInstalled mta \
            zimbraServiceInstalled mailbox
            ms ${zimbra.alt.hostname} \
            zimbraServiceEnabled ldap \
            zimbraServiceEnabled mta \
            zimbraServiceEnabled mailbox
            ms ${zimbra.alt.hostname} \
            zimbraMailPurgeSleepInterval 0 \
            zimbraRedoLogLogPath redolog-2/redo.log \
            zimbraRedoLogArchiveDir redolog-2/archive
            ca user5@${defaultdomain.name} test123 \
            zimbraMailHost ${zimbra.alt.hostname} \
            cn 'Demo User Five' \
            displayName 'Demo User Five' \
            telephoneNumber '+1 650 555 5555' \
            zimbraFeatureIMEnabled FALSE \
            zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
            zimbraPrefMailPollingInterval 12h \
            zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
            zimbraPrefWarnOnExit FALSE
        </echo>
        <echo>Initializing server ${zimbra.alt.hostname} and user user5@${defaultdomain.name}</echo>
        <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
            <arg line="-l -f ${build.zmprov.altserver} -v"/>
        </java>
    </target>

    <target name="server2-generate-localconfig">
        <copy tofile="${dist.dir}/conf/localconfig-2.xml" file="${config.dir}/localconfig.xml${production.suffix}"
              overwrite="true"/>
        <if>
            <not>
                <isset property="is-production"/>
            </not>
            <then>
                <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
                      failonerror="true">
                    <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig-2.xml"/>
                    <arg line="-e mailboxd_directory=/opt/zimbra/jetty-2"/>
                </java>
                <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
                      failonerror="true">
                    <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig-2.xml"/>
                    <arg line="-e mailboxd_keystore=/opt/zimbra/jetty/etc/keystore"/>
                </java>
            </then>
        </if>
        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig-2.xml"/>
            <arg line="-e zimbra_server_hostname=${zimbra.alt.hostname}"/>
        </java>
        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig-2.xml"/>
            <arg line="-e zimbra_admin_service_port=11071"/>
        </java>
        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig-2.xml"/>
            <arg line="-e zmstat_log_directory=${zimbra.home.dir}/zmstat-2"/>
        </java>
        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig-2.xml"/>
            <arg line="-e debug_mock_multiserver_install=true"/>
        </java>
    </target>

    <target name="server2-war">
        <copy file="${config.dir}/web.xml${production.suffix}" tofile="'${build.dir}/web.xml'" overwrite="true"/>
        <replace file="'${build.dir}/web.xml'">
            <replacefilter token="7070" value="11070"/>
            <replacefilter token="7443" value="11443"/>
            <replacefilter token="7071" value="11071"/>
            <replacefilter token="7072" value="11072"/>
            <replacefilter token="7867" value="11867"/>
        </replace>
        <antcall target="war">
            <param name="zimbra.server.hostname" value="${zimbra.alt.hostname}"/>
            <param name="war.web.xml" value="'${build.dir}/web.xml'"/>
        </antcall>
    </target>

    <target name="server2-deploy" depends="server2-war">
        <delete dir="'${jetty.alt.dir}/webapps/service'"/>
        <delete file="'${jetty.alt.dir}/webapps/service.war'"/>
        <copy file="'${warfile}" todir="${jetty.alt.dir}/webapps'"/>
        <mkdir dir="'${jetty.alt.dir}/webapps/service'"/>
        <unzip dest="'${jetty.alt.dir}/webapps/service'" src="'${jetty.alt.dir}/webapps/${warfilename}'"/>
    </target>

    <target name="server2-reset">
        <antcall target="clean"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${generated.java.dir}"/>
        <delete dir="'${zimbra.home.dir}/redolog-2'"/>
        <mkdir dir="'${zimbra.home.dir}/redolog-2/archive'"/>

        <antcall target="init-jetty">
            <param name="jetty.home.dir" value="${jetty.alt.dir}"/>
        </antcall>
        <antcall target="dir-init-jetty">
            <param name="jetty.home.dir" value="${jetty.alt.dir}"/>
        </antcall>

        <antcall target="server2-war"/>

        <antcall target="dev-dist-jetty">
            <param name="dist.jetty.dir" value="${dist.jetty.alt.dir}"/>
        </antcall>
        <mkdir dir="'${dist.dir}/log-2'"/>
        <replace dir="'${dist.jetty.alt.dir}/etc'">
            <replacefilter token="7070" value="11070"/>
            <replacefilter token="7443" value="11443"/>
            <replacefilter token="7071" value="11071"/>
            <replacefilter token="7072" value="11072"/>
            <replacefilter token="7867" value="11867"/>
            <replacefilter token="localconfig.xml" value="localconfig-2.xml"/>
            <replacefilter token="/opt/zimbra/log" value="/opt/zimbra/log-2"/>
            <replacefilter token="/opt/zimbra/jetty" value="${jetty.alt.dir}"/>
        </replace>

        <antcall target="server2-generate-localconfig"/>
        <echo>Updating primary server localconfig to reflect mock-multiserver install</echo>
        <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path"
              failonerror="true">
            <arg line="-e debug_mock_multiserver_install=true"/>
        </java>

        <antcall target="localhost-ssl-cert">
            <param name="jetty.conf.dir" value="${jetty.alt.dir}/etc"/>
        </antcall>

        <copy todir="${zimbra.home.dir}">
            <fileset dir="${dist.dir}"/>
        </copy>
        <mkdir dir="'${jetty.alt.dir}/webapps/service'"/>
        <unzip dest="'${jetty.alt.dir}/webapps/service'" src="'${jetty.alt.dir}/webapps/${warfilename}'"/>

        <antcall target="server2-provision-ldap"/>
    </target>


    <!-- ========================================================= -->
    <!--                          rights                           -->
    <!-- ========================================================= -->

    <target name="generate-domainadmin-rights-xml" depends="set-buildinfo-vars,compile">
        <java classname="com.zimbra.cs.account.accesscontrol.RightManager" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
            <arg line="-a genDomainAdminSetAttrsRights -r conf/rights/zimbra-rights-domainadmin.xml -t conf/rights/zimbra-rights-domainadmin.xml-template"/>
        </java>
    </target>

    <target name="generate-rights-java" depends="set-buildinfo-vars,compile">
        <java classname="com.zimbra.cs.account.accesscontrol.RightManager" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
            <arg line="-a genRightConsts -i conf/rights -r ${src.java.dir}/com/zimbra/cs/account/accesscontrol/generated/RightConsts.java"/>
        </java>
        <java classname="com.zimbra.cs.account.accesscontrol.RightManager" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
            <arg line="-a genAdminRights -i conf/rights -r ${src.java.dir}/com/zimbra/cs/account/accesscontrol/generated/AdminRights.java"/>
        </java>
        <java classname="com.zimbra.cs.account.accesscontrol.RightManager" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
            <arg line="-a genUserRights -i conf/rights -r ${src.java.dir}/com/zimbra/cs/account/accesscontrol/generated/UserRights.java"/>
        </java>
    </target>

    <target name="generate-rights-message-properties" depends="set-buildinfo-vars,compile">
        <java classname="com.zimbra.cs.account.accesscontrol.RightManager" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
            <arg line="-a genMessageProperties -i conf/rights -r conf/msgs/ZsMsgRights.properties"/>
        </java>
    </target>

    <target name="generate-rights">
        <antcall target="generate-domainadmin-rights-xml"/>
        <antcall target="generate-rights-java"/>
        <antcall target="generate-rights-message-properties"/>
    </target>

    <target name="generate-rights-txt">
        <antcall target="zmprov">
            <!-- our core admin SOAP -->
            <param name="args" value="grd com.zimbra.cs.service.admin"/>
            <param name="output" value="docs/rights.txt"/>
        </antcall>
    </target>

    <!--
       ZimbraNetwork>ant dev-deploy-all
       ZimbraNetwork/ZimbraServer>ant deploy
       ZimbraAdminExt>ant deploy-all
       ZimbraXMbxSearch>ant deploy
    -->
    <target name="generate-rights-ext-txt">
        <antcall target="zmprov">
            <!-- known admin extensions, dump them in one file for now -->
            <param name="args"
                   value="grd com.zimbra.bp
               com.zimbra.cert
               com.zimbra.cs.network
               com.zimbra.cs.network.license.service
               com.zimbra.cs.service.backup
               com.zimbra.cs.service.hsm
               com.zimbra.xmbxsearch
               com.zimbra.cert
               com.zimbra.cs.service.versioncheck
               com.zimbra.license.service"/>
            <param name="output" value="docs/rights-ext.txt"/>
        </antcall>
    </target>

    <target name="refresh-rights">
        <antcall target="stop-webserver"/>
        <sleep seconds="2"/>

        <!-- copy from source to dist -->
        <echo>Copying right definition files from ${config.dir}/rights to ${dist.dir}/conf/rights</echo>
        <copy todir="${dist.dir}/conf/rights" overwrite="true">
            <fileset dir="${config.dir}/rights" includes="*.xml"/>
        </copy>

        <!-- copy from dist to zimbra home -->
        <echo>Copying right definition files from ${dist.dir}/conf/rights to ${zimbra.home.dir}/conf/rights</echo>
        <copy todir="${zimbra.home.dir}/conf/rights" overwrite="true">
            <fileset dir="${dist.dir}/conf/rights" includes="*.xml"/>
        </copy>

        <antcall target="start-webserver"/>
    </target>

    <property name="admin-name" value="admin@${defaultdomain.name}"/>

    <target name="grant-rights">
        <antcall target="zmprov">
            <param name="args" value="grr global usr ${admin-name} getAccount"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args" value="grr global usr ${admin-name} getAccountInfo"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args" value="grr global usr ${admin-name} getAccountMembership"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args" value="grr global usr ${admin-name} getDomain"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args" value="grr global usr ${admin-name} getGlobalConfig"/>
        </antcall>
        <antcall target="zmprov">
            <param name="args" value="grr global usr ${admin-name} getMailboxInfo"/>
        </antcall>
    </target>

    <target name="upgrade-domain-admin">
        <echo>Upgrading domain admin</echo>
        <java classname="com.zimbra.cs.account.ldap.upgrade.LdapUpgrade" fork="true" classpathref="class.path"
              failonerror="true">
            <arg line="-b 18277"/>
        </java>
    </target>

    <target name="create-admin">
        <antcall target="zmprov">
            <param name="args" value="ca ${admin-name} test123 zimbraIsAdminAccount TRUE"/>
        </antcall>
    </target>

    <target name="validate-rights">
        <java classname="com.zimbra.cs.account.accesscontrol.RightManager" fork="true" classpathref="class.path"
              failonerror="true">
            <sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
            <arg line="-a validate -i conf/rights"/>
        </java>
    </target>

    <target name="zmprov">
        <if>
            <isset property="output"/>
            <then>
                <echo>zmprov ${args} (output=${output})</echo>
                <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path"
                      failonerror="true" output="${output}">
                    <arg line="${args}"/>
                </java>
            </then>
            <else>
                <echo>zmprov ${args}</echo>
                <java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path"
                      failonerror="true">
                    <arg line="${args}"/>
                </java>
            </else>
        </if>
    </target>


    <target name="test-compile" depends="compile">
        <mkdir dir="${test.classes.dir}"/>
        <!--    <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}"-->
        <!--      debug="true" classpathref="class.path" target="${javac.target}"/>-->
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}"
               debug="true" classpathref="class.path"/>
        <copy todir="${test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="**/*.java"/>
        </copy>
    </target>

    <target name="test" depends="test-compile" description="Run unit tests">
        <delete dir="${test.dir}" quiet="true"/>
        <mkdir dir="${test.dir}/output"/>
        <mkdir dir="${test.dir}/report"/>
        <junit printsummary="on" haltonfailure="on" tempdir="${test.dir}">
            <classpath refid="class.path"/>
            <classpath path="${test.classes.dir}"/>
            <formatter type="xml"/>
            <batchtest todir="${test.dir}/output">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${test.dir}/report">
            <fileset dir="${test.dir}/output"/>
            <report todir="${test.dir}/report"/>
        </junitreport>
        <echo>Test Report: ${test.dir}/report/index.html</echo>
    </target>

</project>
